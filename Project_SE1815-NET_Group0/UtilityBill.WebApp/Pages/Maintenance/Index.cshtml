@page
@model UtilityBill.WebApp.Pages.Maintenance.IndexModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@{
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-primary">Lịch Bảo Trì</h2>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#scheduleModal">
            <i class="bi bi-calendar-plus me-1"></i> Schedule maintenance
        </button>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body p-0">
            <div id="calendar"></div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0">Monthly Maintenance Schedule</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Room/Block</th>
                            <th>Time</th>
                            <th>Status</th>
                            <th>
                                Feature
                            </th>
                        </tr>
                    </thead>
                    <tbody id="schedule-table-body"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal Lên lịch mới -->
<div class="modal fade" id="scheduleModal" tabindex="-1">
    <div class="modal-dialog">
        <form id="schedule-form" class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Lên lịch bảo trì</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Tiêu đề</label>
                    <input name="title" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Phòng ID (tuỳ chọn)</label>
                    <input name="roomId" type="number" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Block (tuỳ chọn)</label>
                    <input name="block" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Thời gian bắt đầu</label>
                    <input name="scheduledStart" type="datetime-local" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Thời gian kết thúc</label>
                    <input name="scheduledEnd" type="datetime-local" class="form-control" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">Mô tả</label>
                    <textarea name="description" class="form-control" rows="3"></textarea>
                </div>
                <input type="hidden" name="createdByUserId" value="@User.FindFirst("sub")?.Value" />
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success">Lưu lịch</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <script>
        const apiBase = '@Configuration["ApiBaseUrl"]';
        const calendarEl = document.getElementById('calendar');
        let calendar;

        function loadCalendar(year, month) {
            fetch(`${apiBase}/maintenance/calendar?year=${year}&month=${month + 1}`)
                .then(r => r.json())
                .then(events => {
                    calendar.removeAllEvents();
                    events.forEach(e => calendar.addEvent({
                        id: e.id,
                        title: e.title,
                        start: e.start,
                        end: e.end,
                        backgroundColor: e.backgroundColor
                    }));
                });

            fetch(`${apiBase}/maintenance/list?year=${year}&month=${month + 1}`)
                .then(r => r.json())
                .then(list => {
                    const tbody = $('#schedule-table-body');
                    tbody.empty();
                    list.forEach(i => {
                        tbody.append(`<tr>
                            <td>${i.title}</td>
                            <td>${i.roomId || i.block || '-'}</td>
                            <td>${new Date(i.scheduledStart).toLocaleString()} - ${new Date(i.scheduledEnd).toLocaleString()}</td>
                            <td>${i.status}</td>
                            <td>
                                <button class="btn btn-sm btn-warning me-1" onclick="editSchedule(${i.id})">Update</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteSchedule(${i.id})">Delete</button>
                            </td>
                        </tr>`);
                    });
                });
        }

        function editSchedule(id) {
            fetch(`${apiBase}/maintenance/${id}`)
                .then(r => r.json())
                .then(data => {
                    const form = $('#schedule-form')[0];
                    form.reset();

                    form.elements['title'].value = data.title;
                    form.elements['roomId'].value = data.roomId || '';
                    form.elements['block'].value = data.block || '';
                    form.elements['scheduledStart'].value = data.scheduledStart.slice(0, 16); // yyyy-MM-ddTHH:mm
                    form.elements['scheduledEnd'].value = data.scheduledEnd.slice(0, 16);
                    form.elements['description'].value = data.description || '';
                    form.elements['createdByUserId'].value = data.createdByUserId;

                    form.dataset.editId = id;
                    $('#scheduleModal').modal('show');
                });
        }

        function deleteSchedule(id) {
            if (!confirm("Bạn có chắc chắn muốn xoá lịch này không?")) return;
            fetch(`${apiBase}/maintenance/${id}`, {
                method: 'DELETE'
            }).then(() => {
                calendar.refetchEvents();
                window.location.reload();
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'vi',
                height: 600,
                dateClick: function (info) {
                    $('#scheduleModal').modal('show');
                },
                datesSet: function () {
                    const currentDate = calendar.getDate();
                    loadCalendar(currentDate.getFullYear(), currentDate.getMonth());
                }
            });
            calendar.render();
        });

        $('#schedule-form').on('submit', function (e) {
            e.preventDefault();
            const data = $(this).serializeArray().reduce((obj, item) => {
                obj[item.name] = item.value;
                return obj;
            }, {});

            const method = this.dataset.editId ? 'PUT' : 'POST';
            const url = this.dataset.editId
                        ? `${apiBase}/maintenance/${this.dataset.editId}`
                        : `${apiBase}/maintenance/create`;
            fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            }).then(() => {
                $('#scheduleModal').modal('hide');
                delete this.dataset.editId;
                calendar.refetchEvents();
                window.location.reload();
            });
        });
    </script>
}
